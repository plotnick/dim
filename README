DIM OF THE YARD!

Dim is a pure-Python window manager for the X window system written by
Alex Plotnick <shrike@netaxs.com>. It currently runs under Python 2.6
and 2.7, and uses xpyb, a Python wrapper around XCB, to communicate with
the X server.

To use Dim, you'll first need xpyb installed. Once you've got that, you can
try running Dim directly from the source directory. First run "./setup.py
generate_py" to auto-generate a few modules from the Xlib C headers (if
those aren't in any of the usual places, you can use the "--source-dirs"
option to tell the setup script where to find them). Then run "./bin/dim"
to start it up. If you decide you like it, you can install it via
"./setup.py install".

The main script ("bin/dim") takes a variety of options that control various
aspects of its behavior. For instance, the default focus mode is sloppy
focus (i.e., focus-follows-mouse except for the root window), but if you
prefer click-to-focus, you can use the "--focus-mode" option. If you don't
like the standard "fixed" font for your window titles, you can provide
an XLFD font name with the "--title-font" option. (Dim currently supports
only core X fonts, so don't give it an Xft-style name.) The "--help" option
gives a complete list of the available command-line options.

While Dim is running, it decorates visible windows with a titlebar and a
thin border. You can move a window around by clicking and dragging on the
titlebar, or by holding down the Meta key (usually bound to the key labeled
"Alt") and clicking anywhere in the window. If you hold down Meta and
right-click (i.e., press button 3) in a window, you can resize the window.
Where you initially click in the window determines which side or corner is
adjusted during the resize, but you can use the space bar to switch between
modes. Pressing escape during a resize or move aborts the operation and
returns the window to its original size and position. Notice that both
other windows and the screen edges (and CRTC edges, if the RandR extension
is enabled) offer resistance to window movement and resizing. Notice also
that guide lines appear along with resistance due to adjacent window edges;
this helps you easily line up windows.

If you middle-click (i.e., press button 2) in a titlebar, you'll see
a "Tags:" prompt replace the window title. You can then enter a
space-separated list of tag names, followed by return to commit, or
escape to abort the edit. (A reasonable subset of Emacs-like keybindings
is also supported in this and the other text entry fields discussed below.)
When you tag a window, it becomes part of each of the "tag sets" named
by the tags you've assigned. You can switch to a tagset by pressing
"Control-Meta-Tab", and then typing the name of the tagset; again,
return commits, and escape aborts. (You can also switch tagsets using
the "dim" script with the "-t" option.) Thus, if you gave each window
exactly one tag and simply switched between those tagsets, you'd have a
scheme very similar to what most window managers call "virtual desktops".

But tagsets are more powerful than virtual desktops, because (a) windows
can have more than one tag, and (b) tagset specifications can include
arbitrary set operations over tagsets. The tagset specification language
is a very small infix language where alphanumeric strings represent tagsets,
and the operators "|", "\", "&", and "~" represent set union, difference,
intersection, and complement, respectively (in increasing order of
precedence). Parenthesis may be used to group sub-expressions, and
whitespace may be used to separate tokens, but is ignored. Thus, a tagset
specification of "(work \ docs) | mail" says to display all of the windows
tagged "work" except those also tagged "docs", along with any windows
tagged "mail". The special tag "." represents the set of windows currently
visible, so if you followed the last example with ". \ mail", you'd get
everything currently visible except your mail. In a tagset specification,
the special tag "*" means all tags, and "0" represents the empty set,
i.e., the set of no windows. ("*" and "~0" are not, in general, equivalent,
because the latter includes windows with no tags, whereas the former does
not.) If you tag a window as "*", it will implicitly become a part of every
tagset, thus becoming "sticky".

If you press "Control-Meta-space", you'll be prompted for a shell command
to execute. At present, no output from such commands is displayed, so this
should only be used for launching X clients or commands with side-effects.
The specified command is executed in the background and detached from its
controlling terminal (i.e., it is "daemonized"), so even if Dim exits,
the program will remain running. As a convenience, "Control-Meta-Return"
launches an xterm in the same way.

Most of the key and mouse button bindings mentioned so far can be easily
modified by changing the global bindings dictionaries found in the main
"dim" script. Quite a lot of other customization (e.g., fonts, colors,
commands, &c.) can also be easily accomplished by changing the code found
there.

Dim is still missing many features that some may consider important, such
as (even minimal) EWMH support, colormap handling (does anyone actually
care anymore?), tiling support, compositing, and better configuration
support without actually editing code. There are surely still many bugs
lurking, and certainly bits of the code that could be cleaner. And perhaps
most importantly, this README is currently the only end-user documentation
that exists. If you would like to help out on any of these fronts, please
feel free to contact the author. Other comments, questions, suggestions,
complaints, and praises are also welcome.
