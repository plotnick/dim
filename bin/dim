#!/usr/bin/env python
# -*- mode: Python; coding: utf-8 -*-

"""A window manager for the X window system."""

from locale import setlocale, LC_ALL
from os import (close, dup, dup2, execlp, execv, execvp, fork, kill,
                openpty, ttyname, wait)
from termios import tcgetattr, tcsetattr, ECHO, TCSADRAIN
from traceback import print_exception
import os
import pdb
import re
import sys

from xcb.xproto import *

from dim.atom import AtomCache
from dim.bindings import *
from dim.color import RGBi
from dim.cycle import CycleFocus
from dim.daemon import daemon
from dim.decorator import TitlebarConfig, TitlebarDecorator
from dim.event import handler
from dim.ewmh import *
from dim.focus import FocusNewWindows, SloppyFocus, ClickToFocus
from dim.keysym import *
from dim.minibuffer import *
from dim.moveresize import MoveResize
from dim.properties import AtomList, WMCommand
from dim.raiselower import RaiseLower
from dim.selections import SelectionClient
from dim.tags import *
from dim.xutil import *

def print_caption(out=None):
    """You think you're so clever. Well, I'm Dim."""
    if out is None:
        out = sys.stdout
    if out.isatty():
        print >> out, "\033[1mDIM OF THE YARD!\033[m"
    else:
        print >> out, "DIM OF THE YARD!"

def shquote(command, chars=re.compile(r'([$`"\\\n])')):
    "Quote a string for safe inclusion in Bourne shell double quotes."
    return chars.sub(r"\\\1", command)

def spawn(command, interactive=False):
    """Execute command (a string) in the background via a shell."""
    shell = os.environ.get("SHELL", "/bin/sh")
    if fork():
        return wait()
    daemon(True, True)

    # We assume that a few standard (POSIX) options are accepted by the shell:
    #   -i (force shell to behave interactively)
    #   -c (execute the command which follows)
    command = (([shell]) +
               (["-i"] if interactive else []) +
               (["-c"] + encode_argv([command])))
    log.info("Spawning command: %s.", command)
    execv(shell, command)

def update_tagset(display, spec):
    """Send a tagset specification to a running window manager."""
    conn = xcb.connect(display)
    send_tagset_expr(conn, parse_tagset_spec(spec))
    conn.flush()
    conn.disconnect()

def wm_exit(display, argv=None):
    """Ask a running window manager to exit gracefully, optionally replacing
    it with another command."""
    conn = xcb.connect(display)
    root = conn.get_setup().roots[conn.pref_screen].root
    atoms = AtomCache(conn)

    # We ask the window manager to exit by sending it a _DIM_WM_EXIT
    # client message. If a valid timestamp is provided, the shutdown
    # procedure will exec(3) the command found in the WM_COMMAND property
    # on the root window. Otherwise, it will simply exit.
    if argv is None:
        time = Time.CurrentTime
    else:
        # If the user supplied a command to execute, we'll use it to
        # replace the WM_COMMAND property. Otherwise, we'll just touch it
        # (i.e., perform a zero-length append); since the manager records
        # its original argv on startup, this will cause it to restart.
        mode = PropMode.Replace if argv else PropMode.Append

        # In order to provide a valid timestamp, we need to wait for the
        # corresponding PropertyNotify after we update the property.
        conn.core.ChangeWindowAttributes(root,
                                         CW.EventMask,
                                         [EventMask.PropertyChange])
        conn.core.ChangeProperty(mode, root,
                                 atoms["WM_COMMAND"],
                                 atoms["UTF8_STRING"],
                                 *WMCommand(argv).change_property_args())
        while True:
            conn.flush()
            event = conn.wait_for_event()
            if (isinstance(event, PropertyNotifyEvent) and
                event.window == root and
                event.atom == atoms["WM_COMMAND"]):
                time = event.time
                break
    send_client_message(conn, root, False,
                        EventMask.SubstructureRedirect,
                        root, atoms["_DIM_WM_EXIT"],
                        32, [time, 0, 0, 0, 0])
    conn.flush()
    conn.disconnect()

class EmergencyTTY(object):
    """Attach to a terminal for emergency debugging. If we're already running
    in a terminal, we'll just use that; otherwise, we'll launch a new xterm(1)
    in slave mode and attach to it."""

    def __new__(cls, *args, **kwargs):
        if sys.stdin.isatty() and sys.stdout.isatty():
            cls = TrivialTTY
        return super(EmergencyTTY, cls).__new__(cls, *args, **kwargs)

    def __init__(self):
        # Save the current values of stdin & stdout; we'll restore them on
        # close. We'll leave stderr alone, since presumably it's redirected
        # somewhere for logging.
        self.stdin = dup(sys.stdin.fileno())
        self.stdout = dup(sys.stdout.fileno())

        master, slave = openpty()

        # When xterm is started in slave mode, it immediately writes its
        # X window id to the tty. We don't want that displayed to the user,
        # so we'll temporarily disable echo, then re-enable it below.
        orig_attr = tcgetattr(master)
        temp_attr = orig_attr[:]
        temp_attr[3] &= ~ECHO # lflags
        tcsetattr(master, TCSADRAIN, temp_attr)

        if not fork():
            close(slave)
            daemon()
            execlp("xterm", "xterm",
                   "-name", "dim",
                   "-geometry", "100x40+0+0",
                   "-S%s/%d" % (ttyname(master), master))
        else:
            dup2(slave, sys.stdin.fileno())
            dup2(slave, sys.stdout.fileno())
            if slave > 2:
                close(slave)
            windowid = int(sys.stdin.readline(), 16)
            log.info("Attaching to xterm 0x%x on %s.",
                     windowid, ttyname(master))
            tcsetattr(master, TCSADRAIN, orig_attr)
            close(master)
            wait()

    def close(self):
        # Closing the fds attached to the tty should cause the xterm to die,
        # so we don't need to explicitly kill it.
        dup2(self.stdin, sys.stdin.fileno())
        dup2(self.stdout, sys.stdout.fileno())
        close(self.stdin)
        close(self.stdout)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

class TrivialTTY(EmergencyTTY):
    def __init__(self):
        pass

    def close(self):
        pass

class BaseWM(EWMHManager, SelectionClient, TagManager, MoveResize, RaiseLower):
    default_decorator_class = TitlebarDecorator

    def __init__(self,
                 titlebar_bindings={},
                 title_font="fixed",
                 minibuffer_font="10x20",
                 **kwargs):
        self.titlebar_bindings = titlebar_bindings
        self.title_font = title_font
        self.minibuffer_font = minibuffer_font
        super(BaseWM, self).__init__(**kwargs)
        self.focus_cycle = None # current focus cycle; only one allowed

    @property
    def current_focus(self):
        return (self.focus_cycle.target if self.focus_cycle
                else super(BaseWM, self).current_focus)

    def init_graphics(self):
        super(BaseWM, self).init_graphics()

        bindings = self.titlebar_bindings
        self.focused_config = TitlebarConfig(self,
                                             fg_color=RGBi(1.0, 1.0, 1.0),
                                             bg_color=RGBi(0.0, 0.0, 0.0),
                                             font=self.title_font,
                                             button_bindings=bindings)
        self.unfocused_config = TitlebarConfig(self,
                                               fg_color=RGBi(0.0, 0.0, 0.0),
                                               bg_color=RGBi(0.75, 0.75, 0.75),
                                               font=self.title_font,
                                               button_bindings=bindings)

        self.minibuffer_config = MinibufferConfig(self,
                                                  fg_color=RGBi(0.0, 0.0, 0.0),
                                                  bg_color=RGBi(1.0, 1.0, 1.0),
                                                  font=self.minibuffer_font)

    def make_decorator(self, cls, client, **kwargs):
        return cls(self.conn, client,
                   focused_config=self.focused_config,
                   unfocused_config=self.unfocused_config,
                   **kwargs)

    @staticmethod
    @event_mask(MoveResize.move_window.event_mask)
    def raise_and_move(widget, event):
        manager = widget.manager
        manager.raise_window(event)
        manager.move_window(event, move_delta=5)

    @staticmethod
    def change_tags(widget, event):
        client = widget.client
        def intern_atom(name):
            return client.atoms[name.encode("UTF-8", "replace")]
        def atom_name(atom):
            return client.atoms.name(atom, "UTF-8", "replace")
        def set_tags(tag_names):
            # Tag names are separated by whitespace and/or commas.
            tag_names = tag_names.replace(",", " ").split()
            client.dim_tags = AtomList(map(intern_atom, tag_names))
        tag_names = [atom_name(tag) for tag in client.dim_tags]
        client.decorator.read_from_user("Tags: ", " ".join(tag_names),
                                        set_tags, time=event.time)

    def mail(self, event):
        """Show, focus, and raise the mail window."""
        # I use an xterm(1) whose instance name is set to "mail".
        # You might use something different. If so, you'll probably
        # have to change the tag specs, too.
        def is_mail_client(client):
            return client.wm_class.instance_name == "mail"
        try:
            mail = next(self.find_clients(is_mail_client))
        except StopIteration:
            return
        self.tagset(r".|mail")
        self.ensure_focus(mail, event.time)
        mail.configure(stack_mode=StackMode.TopIf)

    def nomail(self, event):
        """Hide the mail client."""
        self.tagset(r".\mail")
        self.ensure_focus(None, event.time)

    def shell_command(self, event):
        """Prompt for a shell command and execute it."""
        def execute(command):
            spawn(command, interactive=True)
            dismiss()
        def dismiss():
            minibuffer.destroy()
        minibuffer = Minibuffer(manager=self,
                                parent=self.screen.root,
                                config=self.minibuffer_config,
                                prompt="Shell command: ",
                                commit=execute,
                                rollback=dismiss)
        minibuffer.map(event.time)

    def change_tagset(self, event):
        """Prompt for a tagset expression and show it."""
        def execute(spec):
            try:
                expr = parse_tagset_spec(spec)
            except SpecSyntaxError as err:
                log.warning("Syntax error in tagset specification '%s': %s.",
                            spec, err.args[0])
            else:
                send_tagset_expr(self.conn, expr,
                                 screen=self.screen_number,
                                 atoms=self.atoms)
            dismiss()
        def dismiss():
            minibuffer.destroy()
        minibuffer = Minibuffer(manager=self,
                                parent=self.screen.root,
                                config=self.minibuffer_config,
                                prompt="Tagset: ",
                                commit=execute,
                                rollback=dismiss)
        minibuffer.map(event.time)

    def next_head(self, event):
        """Move the currently focused window to the next head."""
        self.heads.move_client(self.current_focus, +1)

    def previous_head(self, event):
        """Move the currently focused window to the previous head."""
        self.heads.move_client(self.current_focus, -1)

    def delete_window(self, event):
        """Delete the currently focused window."""
        client = self.current_focus
        if client:
            client.delete(event.time)
        else:
            log.warning("Can't get current input focus.")

    def debug(self, event):
        """Activate the Dim debugging console."""
        self.conn.core.SetInputFocusChecked(InputFocus.PointerRoot,
                                            InputFocus.PointerRoot,
                                            event.time).check()
        with mask_events(self.conn, self.screen.root,
                         self.root_event_mask,
                         EventMask.SubstructureRedirect,
                         checked=True):
            with EmergencyTTY():
                print_caption()
                print u"""\a
This is a debugging console running the Python debugger (pdb). Type ‘help’
for a list of pdb commands, or ‘continue’ to resume normal operations.

Dim is currently suspended. It is not processing events, and has temporarily
de-selected SubstructureRedirect on the root window. The ‘self’ variable
contains the current window manager instance, which you may use to examine
and modify (carefully, please!) internal data structures.
"""
                pdb.set_trace()
                pass
        self.ensure_focus()

    def activate_screen_saver(self, event):
        """Activate the screen saver. Should be bound to a release event,
        since otherwise the release will immediately wake up the server."""
        assert isinstance(event, (KeyReleaseEvent, ButtonReleaseEvent))
        self.conn.core.ForceScreenSaverChecked(ScreenSaver.Active).check()

    def inc_backlight(self, event):
        """Make the primary output's backlight brighter."""
        try:
            self.heads.adjust_backlight(self.heads.primary_output, 5, "inc")
        except AttributeError:
            return

    def dec_backlight(self, event):
        """Make the primary output's backlight dimmer."""
        try:
            self.heads.adjust_backlight(self.heads.primary_output, 5, "dec")
        except AttributeError:
            return

    def battery(self, event):
        spawn("xbat -d", True) # shell function

    def calculator(self, event):
        spawn("xcalc")

    def editor(self, event):
        spawn("emacsclient -nc")

    def refresh(self, event):
        spawn("xrefresh")

    def ssh(self, event):
        spawn("xterm -e ssh home")

    def terminal(self, event):
        spawn("xterm")

    def top(self, event):
        spawn("xterm -e top")

    def dictionary(self, event):
        "Look up the selected word in the dictionary."
        def lookup(string):
            spawn('dict "%s" 2>&1 | xmessage -nearmouse -file -' % \
                  shquote(string.strip()))
        self.call_with_primary_selection(lookup,
                                         requestor=self.default_focus_window,
                                         time=event.time)

    def www(self, event,
            scheme=re.compile(r"^(https?|ftp|file)://", re.IGNORECASE),
            spaces=re.compile(r"\s+", re.UNICODE),
            angles=re.compile(r"<([^>]+)>"),
            quotes=re.compile(r'"([^"]+)"')):
        """Invoke a web browser with the selected URI.
        See RFC 3986, Appendix C: Delimiting a URI in Context."""
        def browse(string):
            string = spaces.sub("", string)
            delims = angles.match(string) or quotes.match(string)
            string = delims.group(1) if delims else string
            spawn('x-www-browser "%s"' % shquote(string) if scheme.match(string)
                  else "x-www-browser")
        self.call_with_primary_selection(browse,
                                         requestor=self.default_focus_window,
                                         time=event.time)

    def zzz(self, event):
        spawn("zzz", True) # command on BSD, alias on GNU/Linux

    def start_focus_cycle(self, event, direction):
        """Start a new focus cycle, unless there is one already running."""
        if self.focus_cycle:
            return
        def clear_cycle(client=None):
            self.focus_cycle = None
        self.focus_cycle = CycleFocus(manager=self,
                                      config=self.minibuffer_config,
                                      event=event,
                                      direction=direction,
                                      focus_list=self.focus_list,
                                      button_bindings=focus_cycle_button_bindings,
                                      key_bindings=focus_cycle_key_bindings,
                                      aliases=focus_cycle_aliases,
                                      select=clear_cycle,
                                      abort=clear_cycle)
        return self.focus_cycle

    def start_focus_cycle_next(self, event):
        self.start_focus_cycle(event, +1)

    def start_focus_cycle_prev(self, event):
        self.start_focus_cycle(event, -1)

    def start_focus_cycle_warp(self, event):
        if self.start_focus_cycle(event, 0):
            self.focus_cycle.warp_to_target()

    def fullscreen(self, event):
        """Toggle fullscreen mode on the event window."""
        self.send_net_wm_state(event_window(event), _NET_WM_STATE_TOGGLE,
                               self.atoms["_NET_WM_STATE_FULLSCREEN"])

    def maximize(self, window, horz, vert):
        """Toggle, add, or remove horizontal & vertical maximization.

        The argument handling logic here is slightly subtle, but not all
        that difficult: if exactly one of horz or vert is true, then we
        toggle maximization along that dimension; if both are true, then
        we either maximize in both directions or remove the maximization;
        and if both are false, then all maximization is removed. Other
        interpretations are certainly possible (and are supported by the
        underlying mechanism), but are not necessarily useful on an
        everyday basis."""
        def is_client_maximized():
            client = self.get_client(window)
            if client:
                return client.is_maximized()
        both = (horz == vert)
        neither = ((not horz and not vert) or (both and is_client_maximized()))
        action = (_NET_WM_STATE_REMOVE if neither else
                  _NET_WM_STATE_ADD if both else
                  _NET_WM_STATE_TOGGLE)
        states = ([self.atoms["_NET_WM_STATE_MAXIMIZED_HORZ"],
                   self.atoms["_NET_WM_STATE_MAXIMIZED_VERT"]] if both else
                  [self.atoms["_NET_WM_STATE_MAXIMIZED_HORZ"]] if horz else
                  [self.atoms["_NET_WM_STATE_MAXIMIZED_VERT"]] if vert else [])
        self.send_net_wm_state(window, action, *states)

    # Event handler wrappers for maximize: horizontal, vertical,
    # toggle (full), unmaximize.
    def hmax(self, event): self.maximize(event_window(event), True, False)
    def vmax(self, event): self.maximize(event_window(event), False, True)
    def tmax(self, event): self.maximize(event_window(event), True, True)
    def umax(self, event): self.maximize(event_window(event), False, False)

class UserManager(BaseWM):
    """This manager class is defined with the sole purpose of being redefined
    by the user for their own purposes (e.g., in ~/.dim.py). In particular,
    it provides a convenient place to hang hooks and handlers of various
    kinds. It will be mixed in to the ultimately instantiated window manager
    class along with other classes selected via various options."""
    pass

titlebar_button_bindings = {
    1: BaseWM.raise_and_move,
    2: BaseWM.change_tags
}

global_key_aliases = keypad_aliases
global_key_bindings = {
    ("alt", XK_Tab): BaseWM.start_focus_cycle_next,
    ("alt", XK_ISO_Left_Tab): BaseWM.start_focus_cycle_prev,
    ("alt", XK_period): BaseWM.start_focus_cycle_warp,

    ("control", "alt", XK_Escape): BaseWM.delete_window,
    ("control", "alt", XK_Tab): BaseWM.change_tagset,
    ("control", "alt", XK_space): BaseWM.shell_command,

    ("control", "alt", XK_minus): BaseWM.umax,
    ("control", "alt", XK_equal): {
        XK_Return: BaseWM.fullscreen,
        XK_Right: BaseWM.hmax,
        XK_Left: BaseWM.hmax,
        XK_Up: BaseWM.vmax,
        XK_Down: BaseWM.vmax,
        XK_space: BaseWM.tmax,
        XK_minus: BaseWM.umax,
    },

    ("control", XK_Pause): BaseWM.debug,
    -XK_Pause: BaseWM.activate_screen_saver
}

global_button_bindings = {
    ("alt", 1): MoveResize.move_window,
    ("alt", 3): MoveResize.resize_window,
    ("shift", "alt", 1): RaiseLower.raise_window,
    ("shift", "alt", 3): RaiseLower.lower_window
}

# Focus cycle bindings use an implicit modifier set given by whichever
# modifiers are logically down when the cycle starts (i.e., the modifiers
# specified in the bindings of BaseWM.start_focus_cycle_* above). The
# special key None designates the release of the last held modifier.
focus_cycle_aliases = keypad_aliases
focus_cycle_key_bindings = {
    XK_Tab: CycleFocus.cycle_focus_next,
    XK_ISO_Left_Tab: CycleFocus.cycle_focus_prev,
    XK_Right: CycleFocus.cycle_focus_next,
    XK_Left: CycleFocus.cycle_focus_prev,
    XK_Up: CycleFocus.raise_target_window,
    XK_Down: CycleFocus.lower_target_window,
    XK_Escape: CycleFocus.abort_focus_cycle,
    XK_period: CycleFocus.warp_to_target,
    None: CycleFocus.accept_focus
}

focus_cycle_button_bindings = {
}

# We take the defaults for some command-line options from this global variable
# so that user code may easily override them.
default_options = {
    "focus_mode": "sloppy",
    "title_font": "fixed",
    "minibuffer_font": "10x20"
}

if __name__ == "__main__":
    from optparse import OptionGroup, OptionParser, OptionValueError
    import logging
    import os
    import xcb

    # Initialize locale.
    setlocale(LC_ALL, "")

    # Execute user code.
    try:
        execfile(os.path.expanduser("~/.dim.py"))
    except IOError:
        pass

    # Parse command-line options.
    def consume_remaining_args(option, opt_str, value, parser):
        value = parser.rargs[:]
        del parser.rargs[:]
        setattr(parser.values, option.dest, value)

    optparser = OptionParser("Usage: %prog [OPTIONS] [-e COMMAND [ARG ...]]")
    optparser.set_defaults(**default_options)
    optparser.add_option("--version",
                         action="store_true", dest="version",
                         help="output version information and exit")
    optparser.add_option("--display",
                         dest="display",
                         help="the X server display name")

    focus_modes = {"sloppy": SloppyFocus, "click": ClickToFocus}
    focusopts = optparser.add_option_group("Focus Options")
    focusopts.add_option("--focus-mode",
                         dest="focus_mode",
                         type="choice", choices=focus_modes.keys(),
                         metavar="MODE",
                         help=(("focus mode: one of %s "
                                % ", ".join(map(str, focus_modes.keys()))) +
                               "(default: %default)"))
    focusopts.add_option("--focus-new",
                         action="store_true", dest="focus_new",
                         default=True,
                         help="focus newly-created windows (default: %default)")
    focusopts.add_option("--no-focus-new",
                         action="store_false", dest="focus_new",
                         help="don't give focus to newly-created windows")

    fontopts = optparser.add_option_group("Font Options")
    fontopts.add_option("--title-font",
                        dest="title_font",
                        metavar="FONT",
                        help="client window title font (default: %default)")
    fontopts.add_option("--minibuffer-font",
                        dest="minibuffer_font",
                        metavar="FONT",
                        help="minibuffer font (default: %default)")

    control = optparser.add_option_group("Control Options")
    control.add_option("-t", "--tagset",
                       dest="tagset_spec",
                       metavar="SPEC",
                       help="switch to the specified tagset")
    control.add_option("-e", "--exec",
                       action="callback", callback=consume_remaining_args,
                       dest="command",
                       help="execute another window manager command; "
                            "must be the last option provided")
    control.add_option("-r", "--restart",
                       action="store_const", dest="command", const=[],
                       help="restart a running window manager")
    control.add_option("-x", "--exit",
                       action="store_true", dest="exit",
                       help="ask a running window manager to exit gracefully")

    debugging = optparser.add_option_group("Debugging Options")
    debugging.add_option("-d", "--debug",
                         action="store_true", dest="debug",
                         help="show debugging messages")
    debugging.add_option("-v", "--verbose",
                         action="store_true", dest="verbose",
                         help="be prolix, loquacious, and multiloquent")
    debugging.add_option("-l", "--log",
                         action="append", dest="log",
                         metavar="MODULE",
                         help="enable logging for the specified module")

    (options, args) = optparser.parse_args()
    if options.version:
        print_caption()
        print "Version 0.1"
        sys.exit(0)
    elif options.tagset_spec:
        update_tagset(options.display, *decode_argv([options.tagset_spec]))
        sys.exit(0)
    elif options.exit:
        wm_exit(options.display)
        sys.exit(0)
    elif options.command is not None:
        wm_exit(options.display, decode_argv(options.command))
        sys.exit(0)

    # Put the display in the environment for the benefit of our children.
    if options.display:
        os.environ["DISPLAY"] = options.display

    # Initialize logging system.
    tty = logging.StreamHandler(sys.stderr)
    tty.setFormatter(logging.Formatter("%(levelname)s: %(name)s: %(message)s"))
    logging.getLogger("").addHandler(tty)
    log_level = (logging.DEBUG if options.debug else
                 logging.INFO if options.verbose else
                 logging.WARNING)
    for name in ([""] if options.log is None or "*" in options.log
                 else options.log):
        logging.getLogger(name).setLevel(log_level)
    log = logging.getLogger("wm")

    # Construct a window manager class by mixing in the selected focus policy.
    log.debug("Using %s focus policy.", options.focus_mode)
    wm_class = type("WM",
                    tuple(([focus_modes[options.focus_mode]]) +
                          ([FocusNewWindows] if options.focus_new else []) +
                          ([UserManager, BaseWM])),
                    {})

    # Instantiate the window manager and start it up.
    wm = wm_class(display=options.display,
                  key_bindings=KeyBindingMap(global_key_bindings,
                                             aliases=global_key_aliases),
                  button_bindings=global_button_bindings,
                  titlebar_bindings=titlebar_button_bindings,
                  title_font=options.title_font,
                  minibuffer_font=options.minibuffer_font)
    try:
        wm.start()
    except KeyboardInterrupt:
        wm.shutdown()
    except Exception:
        exc_type, exc_value, traceback = sys.exc_info()
        if not sys.stderr.isatty():
            print_exception(exc_type, exc_value, traceback, file=sys.stderr)
        try:
            wm.shutdown()
        except Exception:
            pass
        with EmergencyTTY() as tty:
            print_caption()
            print u"""\a
Dim has caught a fatal exception, and has shut down as cleanly it can.
This console is for post-mortem debugging only. Type ‘help’ for a list
of pdb commands, ‘run’ to restart, or ‘quit’ to abort.

The window manager instance is in the ‘wm’ variable, and the exception
that delivered the fatal blow is in the ‘exc_value’ variable.
"""
            print_exception(exc_type, exc_value, traceback, file=sys.stdout)
            try:
                pdb.post_mortem(traceback)
            except pdb.Restart:
                log.info("Restarting: %s", " ".join(sys.argv))
                tty.close() # since we don't unwind after the exec
                execvp(sys.argv[0], sys.argv)
